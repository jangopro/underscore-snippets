{
	"_contains": {
		"prefix": "_contains",
		"body": "_.contains(${1:list}, ${2:value}, ${3:fromIndex});",
		"description": "(Underscore.js) Returns true if the value is present in the list. Uses indexOf internally, if list is an Array. ",
		"scope": "source.js"
	},
	"_each": {
		"prefix": "_each",
		"body": "_.each(${1:list}, function (${2:element}, ${3:index}) {\n    ${4:// }\n});",
		"description": "(Underscore) Iterates over a list of elements, yielding each in turn to an iteratee function.",
		"scope": "source.js"
	},
	"_filter": {
		"prefix": "_filter",
		"body": "_.filter(${1:list}, function (${2:value}) {\n  ${3:// return …}\n}), ${4:context}",
		"description": "(Underscore.js) Looks through each value in the list, returning an array of all the values that pass a truth test (predicate).",
		"scope": "source.js"
	},
	"_find": {
		"prefix": "_find",
		"body": "_.find(${1:list}, function (${2:value}) {\n  ${3://   return …}\n});",
		"description": "(Underscore.js) Looks through each value in the list, returning the first one that passes a truth test (predicate), or undefined if no value passes the test.",
		"scope": "source.js"
	},
	"_findWhere": {
		"prefix": "_findWhere",
		"body": "_.findWhere(${1:list}, {${2:key}: ${3:value}});",
		"description": "(Underscore.js) Looks through the list and returns the first value that matches all of the key-value pairs listed in properties.",
		"scope": "source.js"
	},
	"_indexOf": {
		"prefix": "_indexOf",
		"body": "_.indexOf(${1:array}, ${2:value}${3:, [isSorted]})",
		"description": "(Underscore.js) Returns the index at which value can be found in the array, or -1 if value is not present in the array. ",
		"scope": "source.js"
	},
	"_isArguments": {
		"prefix": "_isArguments",
		"body": "_.isArguments(${1:object})",
		"description": "Returns true if object is an Arguments object.",
		"scope": "source.js"
	},
	"_isArray": {
		"prefix": "_isArray",
		"body": "_.isArray(${1:object})",
		"description": "Returns true if object is an Array.",
		"scope": "source.js"
	},
	"_isBoolean": {
		"prefix": "_isBoolean",
		"body": "_.isBoolean(${1:object})",
		"description": "Returns true if object is either true or false.",
		"scope": "source.js"
	},
	"_isDate": {
		"prefix": "_isDate",
		"body": "_.isDate(${1:object})",
		"description": "Returns true if object is a Date.",
		"scope": "source.js"
	},
	"_isElement": {
		"prefix": "_isElement",
		"body": "_.isElement(${1:object})",
		"description": "Returns true if object is a DOM element.",
		"scope": "source.js"
	},
	"_isEmpty": {
		"prefix": "_isEmpty",
		"body": "_.isEmpty(${1:object})",
		"description": "Returns true if an enumerable object contains no values (no enumerable own-properties). For strings and array-like objects _.isEmpty checks if the length property is 0.",
		"scope": "source.js"
	},
	"_isEqual": {
		"prefix": "_isEqual",
		"body": "_.isEqual(${1:object}, ${2:other})",
		"description": "Performs an optimized deep comparison between the two objects, to determine if they should be considered equal.",
		"scope": "source.js"
	},
	"_isFinite": {
		"prefix": "_isFinite",
		"body": "_.isFinite(${1:object})",
		"description": "Returns true if object is a finite Number.",
		"scope": "source.js"
	},
	"_isFunction": {
		"prefix": "_isFunction",
		"body": "_.isFunction(${1:object})",
		"description": "Returns true if object is a Function.",
		"scope": "source.js"
	},
	"_isNaN": {
		"prefix": "_isNaN",
		"body": "_.isNaN(${1:object})",
		"description": "Returns true if object is NaN.",
		"scope": "source.js"
	},
	"_isNull": {
		"prefix": "_isNull",
		"body": "_.isNull(${1:object})",
		"description": "Returns true if the value of object is null.",
		"scope": "source.js"
	},
	"_isNumber": {
		"prefix": "_isNumber",
		"body": "_(${1:object}).isNumber()",
		"description": "Underscore _.isNumber()",
		"scope": "source.js"
	},
	"_isObject": {
		"prefix": "_isObject",
		"body": "_(${1:value}).isObject()",
		"description": "Underscore _.isObject()",
		"scope": "source.js"
	},
	"_isRegExp": {
		"prefix": "_isRegExp",
		"body": "_(${1:object}).isRegExp()",
		"description": "Underscore _.isRegExp()",
		"scope": "source.js"
	},
	"_isString": {
		"prefix": "_isString",
		"body": "_(${1:object}).isString()",
		"description": "Underscore _.isString()",
		"scope": "source.js"
	},
	"_isUndefined": {
		"prefix": "_isUndefined",
		"body": "_(${1:value}).isUndefined()",
		"description": "Underscore _.isUndefined()",
		"scope": "source.js"
	},
	"_map": {
		"prefix": "_map",
		"body": "_.map(${1:list}, function (${2:value}, ${3:key}, ${1:list}) {\n    ${4:// return …}\n}, ${5:context});",
		"description": "(Underscore.js) Produces a new array of values by mapping each value in list through a transformation function (iterator).",
		"scope": "source.js"
	},
	"_size": {
		"prefix": "_size",
		"body": "_.size(${1:list});",
		"description": "(Underscore.js) Return the number of values in the list.",
		"scope": "source.js"
	}
}