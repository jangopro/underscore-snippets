{
	"_after": {
		"prefix": "_after",
		"body": "_.after(${1:count}, ${2:functionName})",
		"description": "Creates a version of the function that will only be run after being called count times. ",
		"scope": "source.js"
	},
	"_all": {
		"prefix": "_all",
		"body": "_.all(${1:list}, ${2:functionName})",
		"description": "(Replace by _.every since > 1.4.0) Returns true if all of the values in the list pass the iterator truth test. ",
		"scope": "source.js"
	},
	"_any": {
		"prefix": "_any",
		"body": "_.any(${1:list}, ${2:[iterator]})",
		"description": "(Replaced by _.some since > 1.4.0) Returns true if any of the values in the list pass the iterator truth test.",
		"scope": "source.js"
	},
	"_bind": {
		"prefix": "_bind",
		"body": "_.bind(${1:functionName}, ${2:object}, ${3:[*arguments]})",
		"description": "Bind a function to an object, meaning that whenever the function is called, the value of this will be the object.",
		"scope": "source.js"
	},
	"_bindAll": {
		"prefix": "_bindAll",
		"body": "_.bindAll(${1:object}, ${2:[*methodNames]})",
		"description": "Binds a number of methods on the object, specified by methodNames, to be run in the context of that object whenever they are invoked.",
		"scope": "source.js"
	},
	"_chain": {
		"prefix": "_chain",
		"body": "_.chain(${1:obj})",
		"description": "Returns a wrapped object. Calling methods on this object will continue to return wrapped objects until value is called.",
		"scope": "source.js"
	},
	"_clone": {
		"prefix": "_clone",
		"body": "_.clone(${1:object})",
		"description": "Create a shallow-copied clone of the provided plain object.",
		"scope": "source.js"
	},
	"_compact": {
		"prefix": "_compact",
		"body": "_.compact(${1:array})",
		"description": "Returns a copy of the array with all falsy values removed.",
		"scope": "source.js"
	},
	"_compose": {
		"prefix": "_compose",
		"body": "_.compose(${1:*functions})",
		"description": "Returns the composition of a list of functions, where each function consumes the return value of the function that follows.",
		"scope": "source.js"
	},
	"_contains": {
		"prefix": "_contains",
		"body": "_.contains(${1:list}, ${2:value}, ${3:fromIndex});",
		"description": "(Underscore.js) Returns true if the value is present in the list. Uses indexOf internally, if list is an Array. ",
		"scope": "source.js"
	},
	"_countBy": {
		"prefix": "_countBy",
		"body": "_.countBy(${1:list}, function(${2:element}) {\n  ${3:// return something}\n})",
		"description": "Sorts a list into groups and returns a count for the number of objects in each group. ",
		"scope": "source.js"
	},
	"_debounce": {
		"prefix": "_debounce",
		"body": "_.debounce(${1:functionName}, ${2:waitInMilliseconds})",
		"description": "Creates and returns a new debounced version of the passed function which will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked.",
		"scope": "source.js"
	},
	"_defaults": {
		"prefix": "_defaults",
		"body": "_.defaults(${1:object}, ${2:*defaults})",
		"description": "Fill in undefined properties in object with the first value present in the following list of defaults objects.",
		"scope": "source.js"
	},
	"_defer": {
		"prefix": "_defer",
		"body": "_.defer(${1:functionName}, ${2:[*arguments]})",
		"description": "Defers invoking the function until the current call stack has cleared, similar to using setTimeout with a delay of 0. ",
		"scope": "source.js"
	},
	"_delay": {
		"prefix": "_delay",
		"body": "_.delay(${1:functionName}, ${2:waitInMilliseconds}${3:, [*arguments]})",
		"description": "Much like setTimeout, invokes function after wait milliseconds.",
		"scope": "source.js"
	},
	"_difference": {
		"prefix": "_difference",
		"body": "_.difference(${1:array}, ${2:*others})",
		"description": "Similar to without, but returns the values from array that are not present in the other arrays.",
		"scope": "source.js"
	},
	"_each": {
		"prefix": "_each",
		"body": "_.each(${1:list}, function (${2:element}, ${3:index}) {\n    ${4:// }\n});",
		"description": "(Underscore) Iterates over a list of elements, yielding each in turn to an iteratee function.",
		"scope": "source.js"
	},
	"_escape": {
		"prefix": "_escape",
		"body": "_.escape(${1:string})",
		"description": "Escapes a string for insertion into HTML, replacing &, <, >, \", `, and ' characters.",
		"scope": "source.js"
	},
	"_extend": {
		"prefix": "_extend",
		"body": "_.extend(${1:destination}, ${2:*sources})",
		"description": "Shallowly copy all of the properties in the source objects over to the destination object, and return the destination object.",
		"scope": "source.js"
	},
	"_filter": {
		"prefix": "_filter",
		"body": "_.filter(${1:list}, function (${2:value}) {\n  ${3:// return …}\n}), ${4:context}",
		"description": "(Underscore.js) Looks through each value in the list, returning an array of all the values that pass a truth test (predicate).",
		"scope": "source.js"
	},
	"_find": {
		"prefix": "_find",
		"body": "_.find(${1:list}, function (${2:value}) {\n  ${3://   return …}\n});",
		"description": "(Underscore.js) Looks through each value in the list, returning the first one that passes a truth test (predicate), or undefined if no value passes the test.",
		"scope": "source.js"
	},
	"_findWhere": {
		"prefix": "_findWhere",
		"body": "_.findWhere(${1:list}, {${2:key}: ${3:value}});",
		"description": "(Underscore.js) Looks through the list and returns the first value that matches all of the key-value pairs listed in properties.",
		"scope": "source.js"
	},
	"_first": {
		"prefix": "_first",
		"body": "_.first(${1:array}, ${2:[n]})",
		"description": "Returns the first element of an array.",
		"scope": "source.js"
	},
	"_flatten": {
		"prefix": "_flatten",
		"body": "_.flatten(${1:array}, ${2:[shallow]})",
		"description": "Flattens a nested array (the nesting can be to any depth). ",
		"scope": "source.js"
	},
	"_functions": {
		"prefix": "_functions",
		"body": "_.functions(${1:object})",
		"description": "Returns a sorted list of the names of every method in an object ",
		"scope": "source.js"
	},
	"_groupBy": {
		"prefix": "_groupBy",
		"body": "_.groupBy(${1:list}, function(${2:value}) {\n  ${3:// return …}\n})",
		"description": "Splits a collection into sets, grouped by the result of running each value through iteratee.",
		"scope": "source.js"
	},
	"_has": {
		"prefix": "_has",
		"body": "_.has(${1:object}, ${2:value})",
		"description": "Does the object contain the given key?",
		"scope": "source.js"
	},
	"_identity": {
		"prefix": "_identity",
		"body": "_.identity(${1:value})",
		"description": "Returns the same value that is used as the argument. ",
		"scope": "source.js"
	},
	"_indexOf": {
		"prefix": "_indexOf",
		"body": "_.indexOf(${1:array}, ${2:value}${3:, [isSorted]})",
		"description": "(Underscore.js) Returns the index at which value can be found in the array, or -1 if value is not present in the array. ",
		"scope": "source.js"
	},
	"_initial": {
		"prefix": "_initial",
		"body": "_.initial(${1:array}, ${2:[n]})",
		"description": "Returns everything but the last entry of the array. Pass n to exclude the last n elements from the result.",
		"scope": "source.js"
	},
	"_intersection": {
		"prefix": "_intersection",
		"body": "_.intersection(${1:*arrays})",
		"description": "Computes the list of values that are the intersection of all the arrays.",
		"scope": "source.js"
	},
	"_invert": {
		"prefix": "_invert",
		"body": "_.invert(${1:object})",
		"description": "Returns a copy of the object where the keys have become the values and the values the keys",
		"scope": "source.js"
	},
	"_invoke": {
		"prefix": "_invoke",
		"body": "_.invoke(${1:list}, ${2:methodName}${3:, [*arguments]})",
		"description": "Calls the method named by methodName on each value in the list.",
		"scope": "source.js"
	},
	"_isArguments": {
		"prefix": "_isArguments",
		"body": "_.isArguments(${1:object})",
		"description": "Returns true if object is an Arguments object.",
		"scope": "source.js"
	},
	"_isArray": {
		"prefix": "_isArray",
		"body": "_.isArray(${1:object})",
		"description": "Returns true if object is an Array.",
		"scope": "source.js"
	},
	"_isBoolean": {
		"prefix": "_isBoolean",
		"body": "_.isBoolean(${1:object})",
		"description": "Returns true if object is either true or false.",
		"scope": "source.js"
	},
	"_isDate": {
		"prefix": "_isDate",
		"body": "_.isDate(${1:object})",
		"description": "Returns true if object is a Date.",
		"scope": "source.js"
	},
	"_isElement": {
		"prefix": "_isElement",
		"body": "_.isElement(${1:object})",
		"description": "Returns true if object is a DOM element.",
		"scope": "source.js"
	},
	"_isEmpty": {
		"prefix": "_isEmpty",
		"body": "_.isEmpty(${1:object})",
		"description": "Returns true if an enumerable object contains no values (no enumerable own-properties). For strings and array-like objects _.isEmpty checks if the length property is 0.",
		"scope": "source.js"
	},
	"_isEqual": {
		"prefix": "_isEqual",
		"body": "_.isEqual(${1:object}, ${2:other})",
		"description": "Performs an optimized deep comparison between the two objects, to determine if they should be considered equal.",
		"scope": "source.js"
	},
	"_isFinite": {
		"prefix": "_isFinite",
		"body": "_.isFinite(${1:object})",
		"description": "Returns true if object is a finite Number.",
		"scope": "source.js"
	},
	"_isFunction": {
		"prefix": "_isFunction",
		"body": "_.isFunction(${1:object})",
		"description": "Returns true if object is a Function.",
		"scope": "source.js"
	},
	"_isNaN": {
		"prefix": "_isNaN",
		"body": "_.isNaN(${1:object})",
		"description": "Returns true if object is NaN.",
		"scope": "source.js"
	},
	"_isNull": {
		"prefix": "_isNull",
		"body": "_.isNull(${1:object})",
		"description": "Returns true if the value of object is null.",
		"scope": "source.js"
	},
	"_isNumber": {
		"prefix": "_isNumber",
		"body": "_.isNumber(${1:object})",
		"description": "Returns true if object is a Number (including NaN).",
		"scope": "source.js"
	},
	"_isObject": {
		"prefix": "_isObject",
		"body": "_.isObject(${1:value})",
		"description": "Returns true if value is an Object. Note that JavaScript arrays and functions are objects, while (normal) strings and numbers are not.",
		"scope": "source.js"
	},
	"_isRegExp": {
		"prefix": "_isRegExp",
		"body": "_.isRegExp(${1:object})",
		"description": "Returns true if object is a RegExp.",
		"scope": "source.js"
	},
	"_isString": {
		"prefix": "_isString",
		"body": "_.isString(${1:object})",
		"description": "Returns true if object is a String.",
		"scope": "source.js"
	},
	"_isUndefined": {
		"prefix": "_isUndefined",
		"body": "_.isUndefined(${1:value})",
		"description": "Returns true if value is undefined.",
		"scope": "source.js"
	},
	"_keys": {
		"prefix": "_keys",
		"body": "_.keys(${1:object})",
		"description": "Retrieve all the names of the object's own enumerable properties.",
		"scope": "source.js"
	},
	"_last": {
		"prefix": "_last",
		"body": "_.last(${1:array}, ${2:[n]})",
		"description": "Returns the last element of an array. ",
		"scope": "source.js"
	},
	"_lastIndexOf": {
		"prefix": "_lastIndexOf",
		"body": "_.lastIndexOf(${1:array}, ${2:value}${3:, [fromIndex]})",
		"description": "Returns the index of the last occurrence of value in the array, or -1 if value is not present.",
		"scope": "source.js"
	},
	"_map": {
		"prefix": "_map",
		"body": "_.map(${1:list}, function (${2:value}, ${3:key}, ${1:list}) {\n    ${4:// return …}\n}, ${5:context});",
		"description": "(Underscore.js) Produces a new array of values by mapping each value in list through a transformation function (iterator).",
		"scope": "source.js"
	},
	"_max": {
		"prefix": "_max",
		"body": "_.max(${1:list}, function (${2:value}) {\n  ${3:// return …}\n})",
		"description": "Returns the maximum value in list.",
		"scope": "source.js"
	},
	"_memoize": {
		"prefix": "_memoize",
		"body": "_.memoize(${1:functionName}, ${2:[hashFunction]})",
		"description": "Memoizes a given function by caching the computed result.",
		"scope": "source.js"
	},
	"_min": {
		"prefix": "_min",
		"body": "_.min(${1:list}, function (${2:value}) {\n  ${3:// return …}\n})",
		"description": "Returns the minimum value in list. ",
		"scope": "source.js"
	},
	"_mixin": {
		"prefix": "_mixin",
		"body": "_.mixin(${1:object})",
		"description": "Allows you to extend Underscore with your own utility functions.",
		"scope": "source.js"
	},
	"_noConflict": {
		"prefix": "_noConflict",
		"body": "_.noConflict()",
		"description": "Give control of the _ variable back to its previous owner.",
		"scope": "source.js"
	},
	"_object": {
		"prefix": "_object",
		"body": "_.object(${1:list}, ${2:[values]})",
		"description": "Converts arrays into objects.",
		"scope": "source.js"
	},
	"_omit": {
		"prefix": "_omit",
		"body": "_.omit(${1:object}, ${2:*keys})",
		"description": "Return a copy of the object, filtered to omit the blacklisted keys (or array of keys). ",
		"scope": "source.js"
	},
	"_once": {
		"prefix": "_once",
		"body": "_.once(${1:functionName})",
		"description": "Creates a version of the function that can only be called one time. ",
		"scope": "source.js"
	},
	"_pairs": {
		"prefix": "_pairs",
		"body": "_.pairs(${1:object})",
		"description": "Convert an object into a list of [key, value] pairs.",
		"scope": "source.js"
	},
	"_partial": {
		"prefix": "_partial",
		"body": "_.partial(${1:functionName}, ${2:[*arguments]})",
		"description": "Partially apply a function by filling in any number of its arguments, without changing its dynamic this value.",
		"scope": "source.js"
	},
	"_pick": {
		"prefix": "_pick",
		"body": "_.pick(${1:object}, ${2:*keys})",
		"description": "Return a copy of the object, filtered to only have values for the whitelisted keys (or array of valid keys).",
		"scope": "source.js"
	},
	"_pluck": {
		"prefix": "_pluck",
		"body": "_.pluck(${1:list}, ${2:propertyName})",
		"description": "A convenient version of what is perhaps the most common use-case for map: extracting a list of property values.",
		"scope": "source.js"
	},
	"_random": {
		"prefix": "_random",
		"body": "_.random(${1:min}, ${2:max})",
		"description": "Returns a random integer between min and max, inclusive. If you only pass one argument, it will return a number between 0 and that number.",
		"scope": "source.js"
	},
	"_range": {
		"prefix": "_range",
		"body": "_.range(${1:[start], }${2:stop}${3:, [step]})",
		"description": "Returns a list of integers from start (inclusive) to stop (exclusive), incremented (or decremented) by step, exclusive.",
		"scope": "source.js"
	},
	"_reduce": {
		"prefix": "_reduce",
		"body": "_.reduce(${1:list}, function (${2:memo}, ${3:value}, ${4:key}, ${1:list} ) {\n  ${6:// return …}\n}, ${5:memo} )",
		"description": "Also known as inject and foldl, reduce boils down a list of values into a single value.",
		"scope": "source.js"
	},
	"_reduceRight": {
		"prefix": "_reduceRight",
		"body": "_.reduceRight(${1:list}, function(${2:memo}, ${3:value}, ${4:key}, ${1:list} ) {\n  ${6:// return …}\n}, ${5:memo} )",
		"description": "The right-associative version of reduce.",
		"scope": "source.js"
	},
	"_reject": {
		"prefix": "_reject",
		"body": "_.reject(${1:list}, function(${2:value}) {\n  ${3:// return …}\n})",
		"description": "Returns the values in list without the elements that the truth test (predicate) passes.",
		"scope": "source.js"
	},
	"_rest": {
		"prefix": "_rest",
		"body": "_.rest(${1:array}, ${2:[index]})",
		"description": "Returns the rest of the elements in an array. Pass an index to return the values of the array from that index onward.",
		"scope": "source.js"
	},
	"_result": {
		"prefix": "_result",
		"body": "_.result(${1:object}, ${2:property})",
		"description": "If the value of the named property is a function then invoke it with the object as context; otherwise, return it.",
		"scope": "source.js"
	},
	"_shuffle": {
		"prefix": "_shuffle",
		"body": "_.shuffle(${1:list})",
		"description": "Returns a shuffled copy of the list, using a version of the Fisher-Yates shuffle.",
		"scope": "source.js"
	},
	"_size": {
		"prefix": "_size",
		"body": "_.size(${1:list});",
		"description": "(Underscore.js) Return the number of values in the list.",
		"scope": "source.js"
	},
	"_sortBy": {
		"prefix": "_sortBy",
		"body": "_.sortBy(${1:list}, function(${2:value}) {\n  ${3:// return …}\n})",
		"description": "Returns a (stably) sorted copy of list, ranked in ascending order by the results of running each value through iteratee",
		"scope": "source.js"
	},
	"_sortedIndex": {
		"prefix": "_sortedIndex",
		"body": "_.sortedIndex(${1:list}, ${2:value}), ${3:[iteratee]}",
		"description": "Uses a binary search to determine the index at which the value should be inserted into the list in order to maintain the list's sorted order.",
		"scope": "source.js"
	},
	"_tap": {
		"prefix": "_tap",
		"body": "_.tap(${1:object}, ${2:functionName})",
		"description": "Invokes interceptor with the object, and then returns object.",
		"scope": "source.js"
	},
	"_template": {
		"prefix": "_template",
		"body": "_.template(${1:templateString}${3:, [settings]})",
		"description": "Compiles JavaScript templates into functions that can be evaluated for rendering.",
		"scope": "source.js"
	},
	"_throttle": {
		"prefix": "_throttle",
		"body": "_.throttle(${1:functionName}, ${2:waitInMilliseconds})",
		"description": "Creates and returns a new, throttled version of the passed function, that, when invoked repeatedly, will only actually call the original function at most once per every wait milliseconds.",
		"scope": "source.js"
	},
	"_times": {
		"prefix": "_times",
		"body": "_.times(${1:n}, function(${2:value}) {\n  ${3:}\n})",
		"description": "Invokes the given iteratee function n times.",
		"scope": "source.js"
	},
	"_toArray": {
		"prefix": "_toArray",
		"body": "_.toArray(${1:list})",
		"description": "Creates a real Array from the list (anything that can be iterated over). ",
		"scope": "source.js"
	},
	"_union": {
		"prefix": "_union",
		"body": "_.union(${1:*arrays})",
		"description": "Computes the union of the passed-in arrays: the list of unique items, in order, that are present in one or more of the arrays.",
		"scope": "source.js"
	},
	"_uniq": {
		"prefix": "_uniq",
		"body": "_.uniq(${1:array}, ${2:[isSorted]}${2:, [iterator]})",
		"description": "roduces a duplicate-free version of the array, using === to test object equality.",
		"scope": "source.js"
	},
	"_uniqueId": {
		"prefix": "_uniqueId",
		"body": "_.uniqueId(${1:[prefix]})",
		"description": "Generate a globally-unique id for client-side models or DOM elements that need one. ",
		"scope": "source.js"
	},
	"_value": {
		"prefix": "_value",
		"body": "_.value(${1:obj})",
		"description": "Extracts the value of a wrapped object.",
		"scope": "source.js"
	},
	"_values": {
		"prefix": "_values",
		"body": "_.values(${1:object})",
		"description": "Return all of the values of the object's own properties.",
		"scope": "source.js"
	},
	"_where": {
		"prefix": "_where",
		"body": "_.where(${1:list}, ${2:properties})",
		"description": "Looks through each value in the list, returning an array of all the values that contain all of the key-value pairs listed in properties.",
		"scope": "source.js"
	},
	"_without": {
		"prefix": "_without",
		"body": "_.without(${1:array}, ${2:[*values]})",
		"description": "Returns a copy of the array with all instances of the values removed.",
		"scope": "source.js"
	},
	"_wrap": {
		"prefix": "_wrap",
		"body": "_.wrap(${1:functionName}, function(${2:func}) {\n  ${3:}\n})",
		"description": "Wraps the first function inside of the wrapper function, passing it as the first argument. ",
		"scope": "source.js"
	},
	"_zip": {
		"prefix": "_zip",
		"body": "_.zip(${1:*arrays})",
		"description": "Merges together the values of each of the arrays with the values at the corresponding position.",
		"scope": "source.js"
	}
}